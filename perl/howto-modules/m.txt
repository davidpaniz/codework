

- Modules as package of functions

    OLD:

        package My::Package

        use Exporter;
        use vars qw/ ISA VERSION /;

        @ISA = "";
        $VERSION = "0.01";


    TODAY:

        package My::Package

        use Exporter;
        our @ISA = "Exporter";

        our $VERSION     = "0.01";
        our @EXPORT      = qw {};
        our @EXPORT_OK   = qw {...};
        our %EXPORT_TAGS = ( t1 => [], t2 => [] );

    ALSO:

        package My::Package

        use 'base' Exporter;
        ...

    perldoc:
        use Exporter   ();
        our ($VERSION, @ISA, @EXPORT, @EXPORT_OK, %EXPORT_TAGS);

        $VERSION = sprintf "%d.%02d", q$Revision: 1.1 $ =~ /(\d+)/g;

    What to export
        @EXPORT    = qw/ fac fib /;
        @EXPORT_OK = qw/ fac fib total_size dir_walk /;
        %EXPORT_TAGS = { calc => [qw /fac fib/]
                       , rec  => [qw /total_size dir_walk/ ]
                       };

        # EXPORT        # imported into namespace by default
        # EXPORT_OK     # All available, must be imported by request

    What to use

        use My::Package;            # only @EXPORT into my namespace
        use My::Package ':DEFAULT'  # idem
        use My::Package qw /dir_walk total_size/;   # by request
        use My::Package ':rec';     # 'rec' tag

        BEGIN { $Exporter::Verbose=1 }  # optional

- OO

    Try to design the new module to be easy to extend and reuse.


    Use blessed references. Use the two argument form of bless to bless into the class name given as the first parameter of the constructor, e.g.,:

     sub new {
         my $class = shift;
         return bless {}, $class;
     }

    or even this if you'd like it to be used as either a static or a virtual method.

     sub new {
         my $self  = shift;
         my $class = ref($self) || $self;
         return bless {}, $class;
     }

    _________________________________________________________________________

    When:
      code:
      my $obj = Class::Test->new();

      obj:
      my $self = shift;  # i.e., as class method:
                                    $self := "Class::Name";
                                    ref($self) := undef;

    When:
      code:
      my $x = $obj->new();

      obj:
      my $self = shift;  # i.e., as obj method:
                                    $self := "Class::Name=HASH(0x112233)"
                                    ref($self) := "Class::Name";


    _________________________________________________________________________


    Pass arrays as references so more parameters can be added later (it's also faster).

    Convert functions into methods where appropriate.

    Split large methods into smaller more flexible ones. Inherit methods from other modules if appropriate.

    By convention you can use a leading underscore on names to informally indicate that they are 'internal' and not for public use.

    You may find it helpful to use letter case to indicate the scope or nature of a variable. For example:

    $ALL_CAPS_HERE   constants only (beware clashes with Perl vars)
    $Some_Caps_Here  package-wide global/static
    $no_caps_here    function scope my() or local() variables

    Function and method names seem to work best as all lowercase. e.g.,
    $obj->as_string() .

    You can use a leading underscore to indicate that a variable or function should not be used outside the package that defined it.


- Copyright

    Copyright (c) 1995 Your Name. All rights reserved.
    This program is free software; you can redistribute it and/or
    modify it under the same terms as Perl itself.


This statement should at least appear in the README file. You may
also wish to include it in a Copying file and your source files.
Remember to include the other words in addition to the Copyright.

- Version

Give the module a version/issue/release number.

To be fully compatible with the Exporter and MakeMaker modules you should store
your module's version number in a non-my package variable called $VERSION. This
should be a floating point number with at least two digits after the decimal
(i.e., hundredths, e.g, $VERSION = "0.01" ). Don't use a "1.3.2" style version.

It may be handy to add a function or method to retrieve the number. Use the
number in announcements and archive file names when releasing the module
(ModuleName-1.02.tar.Z). See perldoc ExtUtils::MakeMaker.pm for details.


